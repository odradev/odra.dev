[
  
  {
    "title": "Welcome to Jekyll!",
    "url": "/blog/posts/welcome-to-jekyll/",
    "categories": "jekyll, update",
    "tags": "",
    "date": "2022-08-04 09:10:43 +0200",
    





    "snippet": "You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.Jekyll requires blog post files to be named according to the following format:YEAR-MONTH-DAY-title.MARKUPWhere YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and MARKUP is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works.Jekyll also offers powerful support for code snippets:def print_hi(name)  puts \"Hi, #{name}\"endprint_hi('Tom')#=&gt; prints 'Hi, Tom' to STDOUT.Check out the Jekyll docs for more info on how to get the most out of Jekyll. File all bugs/feature requests at Jekyll’s GitHub repo. If you have questions, you can ask them on Jekyll Talk."
  },
  
  {
    "title": "Odra 0.0.1 has been released!",
    "url": "/blog/posts/odra-release/",
    "categories": "news, odra",
    "tags": "odra",
    "date": "2022-08-03 10:05:24 +0200",
    





    "snippet": "We want to introduce you to the very first release of Odra Framework proudly!Writing smart contracts have never been easier!Odra is a high-level smart contract framework for Rust, which encourages rapid development and clean, pragmatic design. Built by experienced developers, it takes care of much of the hassle of smart contract development, enabling you to focus on writing your dapp without reinventing the wheel. It’s free and open source.Odra’s goal is to become the go-to smart contract framework for all WebAssembly-based blockchains.A smart contract written using Odra can be executed on all integrated systems. We can do it by abstracting over core concepts that all the above systems are built around. These are type system, storage, entry points, execution context, and testing environment. We believe it will bring standardization to the development of Rust-based smart contracts and enable code reusability we have not yet seen in this ecosystem.Let’s look at a Flipper contract, that holds a boolean value. The contract has a constructor that sets the initial value, and two entry points: flip() and get(), to change and query the current value, respectively.use odra::Variable;#[odra::module]pub struct Flipper {    value: Variable&lt;bool&gt;,}#[odra::module]impl Flipper {    #[odra(init)]    pub fn init(&amp;self, value: bool) {        self.value.set(value);    }    pub fn flip(&amp;self) {        self.value.set(!self.get());    }    pub fn get(&amp;self) -&gt; bool {        self.value.get_or_default()    }}Neat and simple, isn’t it?Do you like it? Start flowing with us!Check out the Odra’s GitHub repo for more info on how to get the most out of Odra. Should you have questions, join our Discord."
  }
  
]

