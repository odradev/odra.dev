"use strict";(self.webpackChunkodra_website=self.webpackChunkodra_website||[]).push([[41577],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>m});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var i=n.createContext({}),u=function(e){var t=n.useContext(i),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},d=function(e){var t=u(e.components);return n.createElement(i.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),p=u(a),m=r,h=p["".concat(i,".").concat(m)]||p[m]||c[m]||o;return a?n.createElement(h,l(l({ref:t},d),{},{components:a})):n.createElement(h,l({ref:t},d))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,l=new Array(o);l[0]=p;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s.mdxType="string"==typeof e?e:r,l[1]=s;for(var u=2;u<o;u++)l[u]=a[u];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}p.displayName="MDXCreateElement"},87983:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>i,contentTitle:()=>l,default:()=>c,frontMatter:()=>o,metadata:()=>s,toc:()=>u});var n=a(87462),r=(a(67294),a(3905));const o={},l="Module Composer",s={unversionedId:"advanced/composer",id:"version-0.4.0/advanced/composer",title:"Module Composer",description:"The Module Composer is a feature of the Odra Framework designed to enhance the reusability and modularity of your smart contracts. It empowers developers to reuse modules and override custom namespaces. This guide provides an in-depth look at the Module Composer feature, complete with practical code examples.",source:"@site/versioned_docs/version-0.4.0/advanced/01-composer.md",sourceDirName:"advanced",slug:"/advanced/composer",permalink:"/docs/0.4.0/advanced/composer",draft:!1,tags:[],version:"0.4.0",lastUpdatedAt:1688045346,formattedLastUpdatedAt:"Jun 29, 2023",sidebarPosition:1,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Advanced",permalink:"/docs/0.4.0/category/advanced"},next:{title:"Delegate",permalink:"/docs/0.4.0/advanced/delegate"}},i={},u=[{value:"Conceptual Overview",id:"conceptual-overview",level:2},{value:"Usage",id:"usage",level:2},{value:"Conclusion",id:"conclusion",level:2}],d={toc:u};function c(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"module-composer"},"Module Composer"),(0,r.kt)("p",null,"The Module Composer is a feature of the Odra Framework designed to enhance the reusability and modularity of your smart contracts. It empowers developers to reuse modules and override custom namespaces. This guide provides an in-depth look at the Module Composer feature, complete with practical code examples."),(0,r.kt)("h2",{id:"conceptual-overview"},"Conceptual Overview"),(0,r.kt)("p",null,"By default, each instance of a module has its own namespace, ensuring each internal value has a unique storage key."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'#[odra::module]\nstruct Contract {\n    value: Variable<u8>, // the default namespace would be "contract_value"\n    module: Module\n}\n\n#[odra::module]\nstruct Module {\n    secret: Variable<String> // the default namespace would be "contract_module_secret"\n}\n')),(0,r.kt)("p",null,"While this isolation often proves useful, there are scenarios where shared storage is beneficial. Here, the Module Composer comes in."),(0,r.kt)("p",null,"Additionally, the Module Composer shortens the storage key - a handy side effect of shared storage. "),(0,r.kt)("p",null,"For each module, Odra generates a corresponding Composer struct (e.g., ",(0,r.kt)("inlineCode",{parentName:"p"},"MyContractComposer")," for ",(0,r.kt)("inlineCode",{parentName:"p"},"MyContract")," module), which aids in manual module composition."),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("p",null,"By default, the #","[odra::module]"," macro generates an implementation of the odra::Instance trait, prefixing the storage key of child modules with the parent namespace. To disable this behavior, pass the ",(0,r.kt)("inlineCode",{parentName:"p"},"skip_instance")," argument to the #","[odra::module]"," macro."),(0,r.kt)("p",null,"Let's write a simple code example. The example provided below introduces some additional complexity by featuring deeper module nesting."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'use odra::{Instance, Variable, Composer};\n\n#[odra::module]\npub struct SharedStorage {\n    pub value: Variable<String>\n}\n\n#[odra::module]\npub struct MyStorage {\n    pub shared: SharedStorage,\n    pub version: Variable<u8>\n}\n\n#[odra::module]\npub struct MoreStorage {\n    pub my_storage: MyStorage,\n    pub extra: Variable<u32>\n}\n\n#[odra::module(skip_instance)]\npub struct ComplexContract {\n    pub shared: SharedStorage,\n    pub more_storage: MoreStorage\n}\n\n#[odra::module]\nimpl ComplexContract {\n    #[odra(init)]\n    pub fn init(&mut self, version: u8, value: String, extra: u32) {\n        self.more_storage.my_storage.version.set(version);\n        self.shared.value.set(value);\n        self.more_storage.extra.set(extra);\n    }\n\n    pub fn get_value(&self) -> String {\n        self.shared.value.get_or_default()\n    }\n\n    pub fn get_value_via_storage(&self) -> String {\n        self.more_storage.my_storage.shared.value.get_or_default()\n    }\n\n    pub fn get_extra_value(&self) -> u32 {\n      self.more_storage.extra.get_or_default()\n    }\n}\n\nimpl Instance for ComplexContract {\n    fn instance(namespace: &str) -> Self {\n        let value = Composer::new(namespace, "v").compose();\n        let shared = SharedStorageComposer::new(namespace, "shared")\n            .with_value(&value)\n            .compose();\n        let my_storage = MyStorageComposer::new(namespace, "my_storage")\n            .with_shared(&shared)\n            .compose();\n        let more_storage = MoreStorageComposer::new(namespace, "more_storage")\n            .with_my_storage(&my_storage)\n            .compose();\n        Self { shared, more_storage }\n    }\n}\n\n#[cfg(test)]\nmod test {\n    use crate::composer::ComplexContractDeployer;\n\n    #[test]\n    fn t() {\n        let shared_value = "shared_value".to_string();\n        let extra_value: u32 = 314;\n        let token = ComplexContractDeployer::init(1, shared_value.clone(), extra_value);\n\n        assert_eq!(token.get_value(), shared_value);\n        assert_eq!(token.get_value_via_storage(), shared_value);\n        assert_eq!(token.get_extra_value(), extra_value);\n    }\n}\n')),(0,r.kt)("p",null,"In this example, we've introduced a new module, ",(0,r.kt)("inlineCode",{parentName:"p"},"MoreStorage"),", which nests ",(0,r.kt)("inlineCode",{parentName:"p"},"MyStorage")," and includes an extra value. The ",(0,r.kt)("inlineCode",{parentName:"p"},"ComplexContract")," contains ",(0,r.kt)("inlineCode",{parentName:"p"},"SharedStorage")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"MoreStorage"),", creating a deeper nesting. Our test ensures that values can be successfully retrieved from different storage levels."),(0,r.kt)("p",null,"If we had used the default behavior, would have been created (so, they would no longer be shared), each having distinct namespaces:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"On the contract level - ",(0,r.kt)("inlineCode",{parentName:"li"},"contract_shared_value"),"."),(0,r.kt)("li",{parentName:"ol"},"On the ",(0,r.kt)("inlineCode",{parentName:"li"},"MyStorage")," module level - ",(0,r.kt)("inlineCode",{parentName:"li"},"contract_more_storage_shared_value"),".")),(0,r.kt)("p",null,"This example showcases how you can effectively use the Module Composer feature to build intricate and efficient smart contracts."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"To customize the storage building block, you can use ",(0,r.kt)("inlineCode",{parentName:"p"},"Composer")," which API matches to modules composers API.")),(0,r.kt)("h2",{id:"conclusion"},"Conclusion"),(0,r.kt)("p",null,"The Module Composer in Odra provides developers with a high level of flexibility and control over module behavior in their smart contracts. This guide, complete with a practical example, should give you a good understanding of the feature. Embrace the power of the Module Composer and unleash the full potential of your smart contracts!"))}c.isMDXComponent=!0}}]);