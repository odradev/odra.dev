<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2022-09-21T15:43:13+02:00</updated><id>/feed.xml</id><title type="html">Your awesome title</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><author><name>GitHub User</name><email>your-email@domain.com</email></author><entry><title type="html">Odra 0.1.0 has been released!</title><link href="/blog/odra-0-1-0-released" rel="alternate" type="text/html" title="Odra 0.1.0 has been released!" /><published>2022-08-28T10:05:24+02:00</published><updated>2022-08-28T10:05:24+02:00</updated><id>/blog/odra-0-1-0-release</id><content type="html" xml:base="/blog/odra-0-1-0-released"><![CDATA[<p>We want to introduce you to the very first release of Odra Framework proudly!</p>

<p>Writing smart contracts have never been easier!</p>

<p>Odra is a high-level smart contract framework for Rust, which encourages rapid development and clean, pragmatic design. Built by experienced developers, it takes care of much of the hassle of smart contract development, enabling you to focus on writing your dapp without reinventing the wheel. It’s free and open source.</p>

<p>Odra’s goal is to become the go-to smart contract framework for all WebAssembly-based blockchains.</p>

<p>A smart contract written using Odra can be executed on all integrated systems. We can do it by abstracting over core concepts that all the above systems are built around. These are type system, storage, entry points, execution context, and testing environment. We believe it will bring standardization to the development of Rust-based smart contracts and enable code reusability we have not yet seen in this ecosystem.</p>

<p>Let’s look at a Flipper contract, that holds a boolean value. The contract has a constructor that sets the initial value, and two entry points: <code class="language-plaintext highlighter-rouge">flip()</code> and <code class="language-plaintext highlighter-rouge">get()</code>, to change and query the current value, respectively.</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">use</span> <span class="nn">odra</span><span class="p">::</span><span class="n">Variable</span><span class="p">;</span>

<span class="nd">#[odra::module]</span>
<span class="k">pub</span> <span class="k">struct</span> <span class="n">Flipper</span> <span class="p">{</span>
    <span class="n">value</span><span class="p">:</span> <span class="n">Variable</span><span class="o">&lt;</span><span class="nb">bool</span><span class="o">&gt;</span><span class="p">,</span>
<span class="p">}</span>

<span class="nd">#[odra::module]</span>
<span class="k">impl</span> <span class="n">Flipper</span> <span class="p">{</span>

    <span class="nd">#[odra(init)]</span>
    <span class="k">pub</span> <span class="k">fn</span> <span class="nf">init</span><span class="p">(</span><span class="o">&amp;</span><span class="k">self</span><span class="p">,</span> <span class="n">value</span><span class="p">:</span> <span class="nb">bool</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">self</span><span class="py">.value</span><span class="nf">.set</span><span class="p">(</span><span class="n">value</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">pub</span> <span class="k">fn</span> <span class="nf">flip</span><span class="p">(</span><span class="o">&amp;</span><span class="k">self</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">self</span><span class="py">.value</span><span class="nf">.set</span><span class="p">(</span><span class="o">!</span><span class="k">self</span><span class="nf">.get</span><span class="p">());</span>
    <span class="p">}</span>

    <span class="k">pub</span> <span class="k">fn</span> <span class="nf">get</span><span class="p">(</span><span class="o">&amp;</span><span class="k">self</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="nb">bool</span> <span class="p">{</span>
        <span class="k">self</span><span class="py">.value</span><span class="nf">.get_or_default</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<p>Neat and simple, isn’t it?</p>

<p>Do you like it? Start flowing with us!</p>

<p>Check out the <a href="https://github.com/odradev/odra">Odra’s GitHub repo</a> for more info on how to get the most out of Odra. Should you have questions, join <a href="https://github.com/odradev/odra">our Discord</a>.</p>]]></content><author><name>kpob</name></author><category term="news" /><category term="odra" /><category term="odra" /><summary type="html"><![CDATA[Writing smart contracts have never been easier!]]></summary></entry></feed>